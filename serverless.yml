org: lhoerhan
app: cocktail-fellow
service: cocktail-fellow

frameworkVersion: "4.2.1"

custom:
  teamPrefix: cocktail_fellow
  stage: ${opt:stage, self:provider.stage}
  region: eu-central-1
  tables:
    user: ${self:custom.teamPrefix}_${self:custom.stage}_user
    group: ${self:custom.teamPrefix}_${self:custom.stage}_group
    userGroupLink: ${self:custom.teamPrefix}_${self:custom.stage}_userGroupLink
    cocktail: ${self:custom.teamPrefix}_${self:custom.stage}_cocktail
    cocktailGroupLink: ${self:custom.teamPrefix}_${self:custom.stage}_cocktailGroupLink
  # local set-up
  dynamodbEndpoint:
    local: http://localhost:8000
    dev: https://dynamodb.${self:custom.region}.amazonaws.com
    prod: https://dynamodb.${self:custom.region}.amazonaws.com
  jwtTtl:
    local: 1800000
    dev: ${param:jwt-ttl, 'default-jwt-ttl-value-for-dev'}
    prod: ${param:jwt-ttl, 'default-jwt-ttl-value-for-prod'}
  appSecretKey:
    local: 'DUMMY-pXdsNbWpY+p7wkCi51iUzoTzECSVNxXo+KJPtKTVo='
    dev: ${param:app-secret-key, 'default-app-secret-key-for-dev'}
    prod: ${param:app-secret-key, 'default-app-secret-key-for-prod'}
  appApiKey:
    local: 'MY-APP-API-KEY'
    dev: ${param:app-api-key, 'default-app-api-key-for-dev'}
    prod: ${param:app-api-key, 'default-app-api-key-for-prod'}
  serverless-dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
  warmup:
    enabled: ${self:provider.stage} == 'prod'
    officeHoursWarmer:
      events:
        - schedule: cron(0/5 14-23 ? * MON-FRI *)   # Monday to Friday 14:00 to 23:55 UTC
        - schedule: cron(0/5 0-2 ? * FRI-SAT *)     # Friday to Saturday 00:00 to 02:55 UTC
        - schedule: cron(0/5 13-23 ? * SAT-SUN *)   # Saturday and Sunday 13:00 to 23:55 UTC
      concurrency: 2
      verbose: false
      logRetentionInDays: 14

provider:
  name: aws
  runtime: java11
  region: ${self:custom.region}
  stage: ${opt:stage, 'dev'}
  timeout: 10
  memorySize: 3004
  environment:
    REGION: ${self:custom.region}
    # tables
    USER_TABLE: ${self:custom.tables.user}
    GROUP_TABLE: ${self:custom.tables.group}
    USER_GROUP_LINK_TABLE: ${self:custom.tables.userGroupLink}
    COCKTAIL_TABLE: ${self:custom.tables.cocktail}
    COCKTAIL_GROUP_LINK_TABLE: ${self:custom.tables.cocktailGroupLink}
    # jet
    JWT_TTL: ${self:custom.jwtTtl.${self:provider.stage}, 1800000}
    # secrets
    APP_SECRET_KEY: ${self:custom.appSecretKey.${self:provider.stage}, 'DUMMY-pXdsNbWpY+p7wkCi51iUzoTzECSVNxXo+KJPtKTVo='}
    APP_API_KEY: ${self:custom.appApiKey.${self:provider.stage}, 'MY-APP-API-KEY'}
    # local set-up
    DYNAMODB_ENDPOINT: ${self:custom.dynamodbEndpoint.${self:provider.stage}, 'https://dynamodb.${self:provider.region}.amazonaws.com'}

package:
  artifact: build/libs/cocktail-fellow-dev-all.jar

functions:
# users
  createUser:
    handler: com.cocktailfellow.user.CreateUser
    events:
      - http:
          path: users
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:GetItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.user}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.user}/index/username-index
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.userGroupLink}
    warmup: true
  updatePasswordUser:
    handler: com.cocktailfellow.user.UpdatePasswordUser
    events:
      - http:
          path: users
          method: patch
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.user}
  deleteUser:
    handler: com.cocktailfellow.user.DeleteUser
    events:
      - http:
          path: users
          method: delete
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.user}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.userGroupLink}
# groups
  createGroup:
    handler: com.cocktailfellow.group.CreateGroup
    events:
      - http:
          path: groups
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.group}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.user}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.userGroupLink}
    warmup: true
  getGroups:
    handler: com.cocktailfellow.group.GetGroups
    events:
      - http:
          path: groups
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.group}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.user}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.userGroupLink}
    warmup: true
  createGroupLink:
    handler: com.cocktailfellow.group.CreateGroupLink
    events:
      - http:
          path: groups/{groupId}/link
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.group}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.user}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.userGroupLink}
  deleteGroupLink:
    handler: com.cocktailfellow.group.DeleteGroupLink
    events:
      - http:
          path: groups/{groupId}/link
          method: delete
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
          - dynamodb:Scan
          - dynamodb:Query
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.group}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.user}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.userGroupLink}
  deleteGroup:
    handler: com.cocktailfellow.group.DeleteGroup
    events:
      - http:
          path: groups/{groupId}
          method: delete
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.group}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.user}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.userGroupLink}
# cocktails
  createCocktail:
    handler: com.cocktailfellow.cocktail.CreateCocktail
    events:
      - http:
          path: groups/{groupId}/cocktails
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:Query
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.cocktail}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.group}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.cocktailGroupLink}
    warmup: true
  updateCocktail:
    handler: com.cocktailfellow.cocktail.UpdateCocktail
    events:
      - http:
          path: groups/{groupId}/cocktails/{cocktailId}
          method: patch
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.cocktail}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.user}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.cocktailGroupLink}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.userGroupLink}
    warmup: true
  getCocktails:
    handler: com.cocktailfellow.cocktail.GetCocktails
    events:
      - http:
          path: groups/{groupId}/cocktails
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.cocktail}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.group}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.cocktailGroupLink}
    warmup: true
  getCocktail:
    handler: com.cocktailfellow.cocktail.GetCocktail
    events:
      - http:
          path: groups/{groupId}/cocktails/{cocktailId}
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.cocktail}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.group}
    warmup: true
  deleteCocktail:
    handler: com.cocktailfellow.cocktail.DeleteCocktail
    events:
      - http:
          path: groups/{groupId}/cocktails/{cocktailId}
          method: delete
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.cocktail}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.user}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.userGroupLink}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.cocktailGroupLink}

# ingredients
  filterIngredients:
    handler: com.cocktailfellow.ingredient.FilterIngredients
    events:
      - http:
          path: ingredients
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.group}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.user}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.userGroupLink}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.cocktailGroupLink}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.cocktail}
    warmup: true

# login
  login:
    handler: com.cocktailfellow.user.LoginUser
    events:
      - http:
          path: login
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:Scan
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.user}
    warmup: true

resources:
  Resources:
    user:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tables.user}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    group:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tables.group}
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    userGroupLink:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tables.userGroupLink}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: groupId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: groupId-index
            KeySchema:
              - AttributeName: groupId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    cocktail:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tables.cocktail}
        AttributeDefinitions:
          - AttributeName: cocktailId
            AttributeType: S
        KeySchema:
          - AttributeName: cocktailId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    cocktailGroupLink:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tables.cocktailGroupLink}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: groupId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: groupId-index
            KeySchema:
              - AttributeName: groupId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

plugins:
  - serverless-iam-roles-per-function
  - serverless-dynamodb
  - serverless-offline
  - serverless-plugin-warmup

org: lhoerhan
app: cocktail-fellow
service: backend

frameworkVersion: "3.35.2"

custom:
  teamPrefix: cocktail-fellow
  stage: ${opt:stage, self:provider.stage}
  region: eu-central-1
  tables:
    user: ${self:custom.teamPrefix}_${self:custom.stage}_user
    group: ${self:custom.teamPrefix}_${self:custom.stage}_group
    userGroupLink: ${self:custom.teamPrefix}_${self:custom.stage}_userGroupLink
    cocktail: ${self:custom.teamPrefix}_${self:custom.stage}_cocktail
    cocktailGroupLink: ${self:custom.teamPrefix}_${self:custom.stage}_cocktailGroupLink

provider:
  name: aws
  snapStart: true
  runtime: java11
  region: ${self:custom.region}
  stage: dev
  environment:
    REGION: ${self:custom.region}
    # tables
    USER_TABLE: ${self:custom.tables.user}
    GROUP_TABLE: ${self:custom.tables.group}
    USER_GROUP_LINK_TABLE: ${self:custom.tables.userGroupLink}
    COCKTAIL_TABLE: ${self:custom.tables.cocktail}
    COCKTAIL_GROUP_LINK_TABLE: ${self:custom.tables.cocktailGroupLink}

    APP_SECRET_KEY: "yourSuperStrongSecretKeyHereMakeSureItIsAtLeast32CharactersLong"
    APP_API_KEY: "V8mjtjn1Kv9TofGELg7ZZL0lHODIlnLl"
    JWT_TTL: 1800000 # 30 minutes

package:
  artifact: build/libs/cocktail-fellow-dev-all.jar

functions:
# users
  createUser:
    handler: com.cocktailfellow.user.CreateUser
    events:
      - http:
          path: users
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.user}
  deleteUser:
    handler: com.cocktailfellow.user.DeleteUser
    events:
      - http:
          path: users
          method: delete
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Scan
          - dynamodb:Query
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.user}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.userGroupLink}
# groups
  createGroup:
    handler: com.cocktailfellow.group.CreateGroup
    events:
      - http:
          path: groups
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:Query
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.group}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.userGroupLink}
  getGroups:
    handler: com.cocktailfellow.group.GetGroups
    events:
      - http:
          path: groups
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.group}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.userGroupLink}
  createGroupLink:
    handler: com.cocktailfellow.group.CreateGroupLink
    events:
      - http:
          path: groups/{groupId}/link
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:Query
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.group}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.userGroupLink}
  deleteGroupLink:
    handler: com.cocktailfellow.group.DeleteGroupLink
    events:
      - http:
          path: groups/{groupId}/link
          method: delete
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Scan
          - dynamodb:Query
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.group}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.userGroupLink}
  deleteGroup:
    handler: com.cocktailfellow.group.DeleteGroup
    events:
      - http:
          path: groups
          method: delete
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Scan
          - dynamodb:Query
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.group}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.userGroupLink}
# cocktails
  createCocktail:
    handler: com.cocktailfellow.cocktail.CreateCocktail
    events:
      - http:
          path: groups/{groupId}/cocktails
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:Query
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.cocktail}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.cocktailGroupLink}
  getCocktails:
    handler: com.cocktailfellow.cocktail.GetCocktails
    events:
      - http:
          path: groups/{groupId}/cocktails
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.cocktail}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.cocktailGroupLink}
  getCocktail:
    handler: com.cocktailfellow.cocktail.GetCocktail
    events:
      - http:
          path: groups/{groupId}/cocktails/{cocktailId}
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.cocktail}
# login
  login:
    handler: com.cocktailfellow.user.LoginUser
    events:
      - http:
          path: login
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:Scan
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tables.user}

resources:
  Resources:
    users:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tables.user}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: username-index
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    groups:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tables.group}
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    userGroupLinks:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tables.userGroupLink}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: groupId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: groupId-index
            KeySchema:
              - AttributeName: groupId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    cocktails:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tables.cocktail}
        AttributeDefinitions:
          - AttributeName: cocktailId
            AttributeType: S
        KeySchema:
          - AttributeName: cocktailId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    cocktailGroupLinks:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tables.cocktailGroupLink}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: groupId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: groupId-index
            KeySchema:
              - AttributeName: groupId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

plugins:
  - serverless-iam-roles-per-function
  - serverless-offline
  - serverless-dynamodb-local
